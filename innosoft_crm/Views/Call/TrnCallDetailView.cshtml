@{
    ViewBag.Title = "CALL DETAIL";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    /* Keeps the original modal width */
    body .modal-dialog {
        width: 900px;
    }
</style>

<div id="callsViewModel">
    <div class="page-header">
        <h2>Call Log Details</h2>
        <div class="actions">
            <button type="button" class="btn btn-primary" onclick="cmdSave_onclick()">
                <span class="glyphicon glyphicon-save"></span> Save
            </button>
            <button type="button" class="btn btn-default" onclick="cmdClose_onclick()">
                Back to List
            </button>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <input type="hidden" id="CustomerIdMem" data-bind="value: CustomerId" />
            <input type="hidden" id="ProductIdMem" data-bind="value: ProductId" />
            <input type="hidden" id="CallStatusIdMem" data-bind="value: CallStatusId" />
            <input type="hidden" id="AnsweredByIdMem" data-bind="value: AnsweredById" />
            <input type="hidden" id="AssignedToIdMem" data-bind="value: AssignedtoId" />

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="Id">Call No:</label>
                        <input type="text" class="form-control" id="Id" name="Id" data-bind="value: Id" disabled="disabled" />
                    </div>
                    <div class="form-group">
                        <label for="DateCalledMem">Date Called:</label>
                        <input type="text" class="form-control date-picker" id="DateCalledMem" name="DateCalled" data-bind="value: DateCalled" />
                    </div>
                    <div class="form-group">
                        <label>Customer:</label>
                        <input type="text" id="CustomerIdSelect" value="Initializing ...." class=" select2 select2-field" style="width: 100%;" />
                    </div>
                    <div class="form-group">
                        <label>Product:</label>
                        <input type="text" id="ProductIdSelect" value="Initializing ...." class=" seletc2 select2-field " style="width: 100%;" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="CallerMem">Caller:</label>
                        <input type="text" class="form-control" id="CallerMem" name="Caller" data-bind="value: Caller" />
                    </div>
                    <div class="form-group">
                        <label>Call Status:</label>
                        <input type="text" id="CallStatusIdSelect" value="Initializing ...." class=" select2 select2-field" style="width: 100%;" />
                    </div>
                    <div class="form-group">
                        <label>Answered By:</label>
                        <input type="text" id="AnsweredByIdSelect" value="Initializing ...." class=" select2 select2-field" style="width: 100%;" />
                    </div>
                    <div class="form-group">
                        <label>Assigned To:</label>
                        <input type="text" id="AssignedToIdSelect" value="Initializing ...." class=" select2 select2-field" style="width: 100%;" />
                    </div>
                </div>
            </div>
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label for="IssueMem">Issue:</label>
                            <textarea class="form-control" rows="4" id="IssueMem" name="Issue" data-bind="value: Issue" style="max-width: 100% !important;"></textarea>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="callActionList">
    <div class="page-header" style="margin-top: 40px;">
        <h3>Call Actions</h3>
        <div class="actions">
            <button type="button" class="btn btn-default" onclick="cmdAddCallAction_onClick()">
                <span class="glyphicon glyphicon-plus"></span> Create Action
            </button>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table id="TrnCallActionListDatable" class="table table-hover" style="width:100%;">
                    <thead>
                        <tr>
                            <th>Detail</th>
                            <th>Delete</th>
                            <th>Acted By</th>
                            <th>Call Action</th>
                            <th>Accepted Date</th>
                            <th>Action Type</th>
                            <th>Done</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<section id="callActionsViewModel">
    <div class="modal fade" id="callActionModal" role="dialog" aria-labelledby="callActionModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">

                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="cmdCallActionClose_onClick()"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="callActionModalLabel"><span class="glyphicon glyphicon-phone-alt"></span> Call Action</h4>
                </div>

                <div class="modal-body">
                    <input type="hidden" id="ActedByIdMem" data-bind="value: ActedBy" />
                    <input type="hidden" id="ActionTypeIdMem" data-bind="value: ActionTypeId" />
                    <input type="hidden" id="DoneMem" data-bind="value: Done" />

                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Ticket No:</label>
                                <input type="text" class="form-control" id="CallActionId" data-bind="value: CallActionId" disabled="disabled" />
                            </div>
                            <div class="form-group">
                                <label>Call No:</label>
                                <input type="text" class="form-control" id="CallIdMem" data-bind="value: CallId" disabled="disabled" />
                            </div>
                            <div class="form-group">
                                <label>Encoded Date:</label>
                                <input type="text" class="form-control date-picker" id="EncodedDateMem" data-bind="value: EncodedDate" />
                            </div>
                            <div class="form-group">
                                <label>Acted By:</label>
                                <input type="text" id="ActedByIdSelect" name="ActedById" value="Initializing ...." class=" select2 select2-field" style="width: 100%;" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Action Type:</label>
                                <input type="text" id="ActionTypeIdSelect" name="ActionTypeId"  value="Initializing ...." class=" select2 select2-field" style="width: 100%;" />
                            </div>
                            <div class="form-group">
                                <label>Target Date:</label>
                                <input type="text" class="form-control date-picker" id="TargetDateMem" data-bind="value: TargetDate" />
                            </div>
                            <div class="form-group">
                                <label>Accepted Date:</label>
                                <input type="text" class="form-control date-picker" id="AcceptedDateMem" data-bind="value: AcceptedDate" />
                            </div>
                            <div class="form-group">
                                <label>Accepted By:</label>
                                <input type="text" class="form-control" id="AcceptedByMem" data-bind="value: AcceptedBy" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Cost:</label>
                                <input type="text" class="form-control" id="CostMem" data-bind="value: Cost" />
                            </div>
                            <div class="form-group">
                                <label>Number Of Hours:</label>
                                <input type="text" class="form-control" id="NumberOfHoursMem" disabled="disabled" data-bind="value: NumberOfHours" />
                            </div>
                            <div class="form-group">
                                <label>Done:</label>
                                <select id="DoneSelect" class="select2-field" name="Done" style="width: 100%;">
                                    <option value="true">True</option>
                                    <option value="false">False</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label>Action:</label>
                                <textarea class="form-control" rows="5" id="ActionMem" name="Action" data-bind="value: Action" style="max-width: 100% !important;"></textarea>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-default pull-left" onclick="cmdCallActionPrint_onClick()">
                        <span class="glyphicon glyphicon-print"></span> Print
                    </button>
                    <button type="button" class="btn btn-default" data-dismiss="modal" onclick="cmdCallActionClose_onClick()">Close</button>
                    <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="cmdSaveCallAction_onClick()">
                        <span class="glyphicon glyphicon-save"></span> Save Changes
                    </button>
                </div>

            </div>
        </div>
    </div>
</section>

<script src="~/Scripts/jquery-2.0.3.js" type="text/javascript"></script>
<script src="~/Scripts/knockout-3.0.0.js" type="text/javascript"></script>
<script src="~/Scripts/knockout.viewmodel.js" type="text/javascript"></script>
<script src="~/Scripts/bootstrap.js" type="text/javascript"></script>
<script src="~/Scripts/jquery.dataTables.js" type="text/javascript"></script>
<script type="text/javascript" src="~/Scripts/bootstrap-dataTables-paging.js"></script>
<script src="~/Scripts/bootstrap-datepicker.js" type="text/javascript"></script>
<script src="~/Scripts/select2.js" type="text/javascript"></script>
<script src="~/Scripts/toastr.js" type="text/javascript"></script>

<script>
    var koNamespace = {};
    var koTrnCallViewModel;

    var $trnCallMaxId;

    var $customerId;
    var $customer;

    var $productId;
    var $product;

    var $callStatusId;
    var $callStatus;

    var $answeredById;
    var $answeredBy;

    var $AssignedToId;
    var $AssignedTo;

    function getParameterByName(name) {
        name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
            results = regex.exec(location.search);
        return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    }

    koNamespace.initViewModel = function (call) {
        var paramId = getParameterByName("Id");
        var callViewModel;

        if (paramId == 0) {
            callViewModel = {
                Id: !document.getElementById("Id").value ? 0 : document.getElementById("Id").value,
                DateCalled: !document.getElementById("DateCalledMem").value ? "" : document.getElementById("DateCalledMem").value,
                CustomerId: !document.getElementById("CustomerIdMem").value ? "" : document.getElementById("CustomerIdMem").value,
                ProductId: !document.getElementById("ProductIdMem").value ? "" : document.getElementById("ProductIdMem").value,
                Caller: !document.getElementById("CallerMem").value ? "" : document.getElementById("CallerMem").value,
                Issue: !document.getElementById("IssueMem").value ? "" : document.getElementById("IssueMem").value,
                CallStatusId: !document.getElementById("CallStatusIdMem").value ? "" : document.getElementById("CallStatusIdMem").value,
                AnsweredById: !document.getElementById("AnsweredByIdMem").value ? "" : document.getElementById("AnsweredByIdMem").value,
                AssignedtoId: !document.getElementById("AssignedToIdMem").value ? "" : document.getElementById("AssignedToIdMem").value
            };
        }
        else {
            callViewModel = {
                Id: ko.observable(!call ? 0 : call.Id),
                DateCalled: ko.observable(!call ? "" : call.DateCalled),
                CustomerId: ko.observable(!call ? "" : call.CustomerId),
                ProductId: ko.observable(!call ? "" : call.ProductId),
                Caller: ko.observable(!call ? "" : call.Caller),
                Issue: ko.observable(!call ? "" : call.Issue),
                CallStatusId: ko.observable(!call ? "" : call.CallStatusId),
                AnsweredById: ko.observable(!call ? "" : call.AnsweredById),
                AssignedtoId: ko.observable(!call ? "" : call.AssignedtoId)
            };
        }
        return callViewModel;
    };

    koNamespace.bindData = function (call) {
        var viewModel = koNamespace.initViewModel(call);

        ko.applyBindings(viewModel, document.getElementById('callsViewModel'));
        koTrnCallViewModel = viewModel;

    };

    koNamespace.getTrnCall = function () {
        $.ajax({
            url: "@(Html.Raw(Url.Action("TrnCallDetail", "Call", new { Id = HttpContext.Current.Request.QueryString["Id"] })))",
            type: 'get',
            async: false,
            contentType: 'application/json',
            success: function (result) {
                koNamespace.bindData(result);
            }
        });
    };

    koNamespace.saveTrnCall = function () {
        $.ajax({
            url: "@Url.Action("TrnCallDetailSave", "Call")",
            async: false,
            type: 'post',
            data: ko.toJSON(koTrnCallViewModel),
            contentType: 'application/json',
            success: function () {
                toastr.success('Successfully Saved...');
            }
        });
    };

    function getTrnCallMaxId() {
        $.ajax({
            url: "@Url.Action("TrnCallDetailMaxId", "Call")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            responseType: "json",
            success:
            function (result) {
                $trnCallMaxId = result;
            }
        });
    }

    function selectCustomer(id, fn) {
        $.ajax({
            url: "@Url.Action("SelectCustomerById", "Call")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: { 'Id': id },
            async: false,
            responseType: "json",
            success:
                function (result) {
                    fn(result);
                }
        });
    }

    function selectProduct(id, fn) {
        $.ajax({
            url: "@Url.Action("SelectProductById", "Call")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: { 'Id': id },
            async: false,
            responseType: "json",
            success:
                function (result) {
                    fn(result);
                }
        });
    }

    function selectCallStat(id, fn) {
        $.ajax({
            url: "@Url.Action("SelectCallStatusById", "Call")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: { 'Id': id },
            async: false,
            responseType: "json",
            success:
                function (result) {
                    fn(result);
                }
        });
    }

    function selectAnsweredBy(id, fn) {
        $.ajax({
            url: "@Url.Action("SelectAnsweredByById", "Call")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: { 'Id': id },
            async: false,
            responseType: "json",
            success:
                function (result) {
                    fn(result);
                }
        });
    }

    function selectAssignedTo(id, fn) {
        $.ajax({
            url: "@Url.Action("SelectAssignedToById", "Call")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: { 'Id': id },
            async: false,
            responseType: "json",
            success:
                function (result) {
                    fn(result);
                }
        });
    }

    $(document).ready(function () {
        var trnCallId = "@HttpContext.Current.Request.QueryString["Id"]";

        ko.cleanNode(document.getElementById("callsViewModel"));

        koNamespace.getTrnCall();

        $('#DateCalledMem').on('click', function () {
            $('#DateCalledMem').datepicker('show');
        });

        selectCustomer(trnCallId, function (result) {
            $customerId = result.Id;
            $customer = result.Name;
        });

        selectProduct(trnCallId, function (result) {
            $productId = result.Id;
            $product = result.Product;
        });

        selectCallStat(trnCallId, function (result) {
            $callStatusId = result.Id;
            $callStatus = result.CallStatus;
        });

        selectAnsweredBy(trnCallId, function (result) {
            $answeredById = result.Id;
            $answeredBy = result.Name;
        });

        selectAssignedTo(trnCallId, function (result) {
            $AssignedToId = result.Id;
            $AssignedTo = result.Name;
        });

        var pageSize = 20;

        $('#CustomerIdSelect').select2({
            placeholder: 'Customer',
            minimumInputLength: 0,
            ajax: {
                quietMillis: 10,
                url: '@Url.Action("SelectCustomer", "Call")',
                dataType: 'jsonp',
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term
                    };
                },
                results: function (data, page) {
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            }
            ,
            allowClear: true,
            formatSelection: function (data) {
                return data.text;
            },
            initSelection: function (element, callback) {
                if (trnCallId !== "") {
                    var data = { id: $customerId, text: $customer };
                    callback(data);
                }
            }
        }).on('change', function (e) {
            console.log(e.val);

            var customerElem = document.getElementById("CustomerIdMem");
            customerElem.value = e.val;
            ko.utils.triggerEvent(customerElem, "change");
        });

        $('#ProductIdSelect').select2({
            placeholder: 'Product',
            minimumInputLength: 0,
            ajax: {
                quietMillis: 10,
                url: '@Url.Action("SelectProduct", "Call")',
                dataType: 'jsonp',
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term
                    };
                },
                results: function (data, page) {
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            }
            ,
            allowClear: true,
            formatSelection: function (data) {
                return data.text;
            },
            initSelection: function (element, callback) {
                if (trnCallId !== "") {
                    var data = { id: $productId, text: $product };
                    callback(data);
                }
            }
        }).on('change', function (e) {
            console.log(e.val);

            var productElem = document.getElementById("ProductIdMem");
            productElem.value = e.val;
            ko.utils.triggerEvent(productElem, "change");
        });

        $('#CallStatusIdSelect').select2({
            placeholder: 'Call Status',
            minimumInputLength: 0,
            ajax: {
                quietMillis: 150,
                url: '@Url.Action("SelectCallStatus", "Call")',
                dataType: 'jsonp',
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term
                    };
                },
                results: function (data, page) {
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            }
            ,
            allowClear: true,
            formatSelection: function (data) {
                return data.text;
            },
            initSelection: function (element, callback) {
                if (trnCallId !== "") {
                    var data = { id: $callStatusId, text: $callStatus };
                    callback(data);
                }
            }
        }).on('change', function (e) {
            console.log(e.val);

            var callStatusElem = document.getElementById("CallStatusIdMem");
            callStatusElem.value = e.val;
            ko.utils.triggerEvent(callStatusElem, "change");
        });

        $('#AnsweredByIdSelect').select2({
            placeholder: 'Answered By',
            minimumInputLength: 0,
            ajax: {
                quietMillis: 150,
                url: '@Url.Action("SelectAnsweredBy", "Call")',
                dataType: 'jsonp',
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term
                    };
                },
                results: function (data, page) {
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            }
            ,
            allowClear: true,
            formatSelection: function (data) {
                return data.text;
            },
            initSelection: function (element, callback) {
                if (trnCallId !== "") {
                    var data = { id: $answeredById, text: $answeredBy };
                    callback(data);
                }
            }
        }).on('change', function (e) {
            console.log(e.val);


            var answeredByElem = document.getElementById("AnsweredByIdMem");
            answeredByElem.value = e.val;
            ko.utils.triggerEvent(answeredByElem, "change");
        });

        $('#AssignedToIdSelect').select2({
            placeholder: 'Answered By',
            minimumInputLength: 0,
            ajax: {
                quietMillis: 150,
                url: '@Url.Action("SelectAssignedTo", "Call")',
                dataType: 'jsonp',
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term
                    };
                },
                results: function (data, page) {
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            }
            ,
            allowClear: true,
            formatSelection: function (data) {
                return data.text;
            },
            initSelection: function (element, callback) {
                if (trnCallId !== "") {
                    var data = { id: $AssignedToId, text: $AssignedTo };
                    callback(data);
                }
            }
        }).on('change', function (e) {
            console.log(e.val);

            var assignedToElem = document.getElementById("AssignedToIdMem");
            assignedToElem.value = e.val;
            ko.utils.triggerEvent(assignedToElem, "change");
        });
    });

    @*function cmdPrint_onclick() {
        location.href = 'RepCallView?Id=' + '@HttpContext.Current.Request.QueryString["Id"]';
    }*@

    function cmdSave_onclick() {
        var paramId = getParameterByName("Id");

        if (paramId == 0) {
            koNamespace.bindData();
            if (confirm("Do you want save this record?...")) {
                koNamespace.saveTrnCall();

                getTrnCallMaxId();

                location.href = 'TrnCallDetailView?Id=' + $trnCallMaxId;
            }
        } else {
            if (confirm("Do you want update this record?...")) {
                koNamespace.saveTrnCall();
            }
        };
    }

    function cmdClose_onclick() {
        location.href = 'TrnCallListView';
    }

</script>

<script>
    var koCallActionNamespace = {};
    var koTrnCallActionViewModel;

    var $callActionId;

    var $actedById;
    var $actedBy;

    var $actionTypeId;
    var $actionType;

    var $done;

    koCallActionNamespace.initViewModel = function (callActions) {
        var callActionViewModel;

        if ($callActionId == 0) {
            callActionViewModel = {
                CallActionId: !document.getElementById("CallActionId").value ? 0 : document.getElementById("CallActionId").value,
                CallId: !document.getElementById("CallIdMem").value ? "" : document.getElementById("CallIdMem").value,
                ActedBy: !document.getElementById("ActedByIdMem").value ? "" : document.getElementById("ActedByIdMem").value,
                Action: !document.getElementById("ActionMem").value ? "" : document.getElementById("ActionMem").value,
                EncodedDate: !document.getElementById("EncodedDateMem").value ? "" : document.getElementById("EncodedDateMem").value,
                TargetDate: !document.getElementById("TargetDateMem").value ? "" : document.getElementById("TargetDateMem").value,
                //TargetTime: !document.getElementById("TargetTimeMem").value ? "" : document.getElementById("TargetTimeMem").value,
                AcceptedDate: !document.getElementById("AcceptedDateMem").value ? "" : document.getElementById("AcceptedDateMem").value,
                //AcceptedTime: !document.getElementById("AcceptedTimeMem").value ? "" : document.getElementById("AcceptedTimeMem").value,
                AcceptedBy: !document.getElementById("AcceptedByMem").value ? "" : document.getElementById("AcceptedByMem").value,
                ActionTypeId: !document.getElementById("ActionTypeIdMem").value ? "" : document.getElementById("ActionTypeIdMem").value,
                Cost: !document.getElementById("CostMem").value ? "" : document.getElementById("CostMem").value,
                NumberOfHours: !document.getElementById("NumberOfHoursMem").value ? "" : document.getElementById("NumberOfHoursMem").value,
                Done: !document.getElementById("DoneMem").value ? "" : document.getElementById("DoneMem").value
            };
        }
        else {
            callActionViewModel = {
                CallActionId: ko.observable(!callActions ? 0 : callActions.CallActionId),
                CallId: ko.observable(!callActions ? 0 : callActions.CallId),
                ActedBy: ko.observable(!callActions ? 0 : callActions.ActedBy),
                Action: ko.observable(!callActions ? 0 : callActions.Action),
                EncodedDate: ko.observable(!callActions ? 0 : callActions.EncodedDate),
                TargetDate: ko.observable(!callActions ? 0 : callActions.TargetDate),
                //TargetTime: ko.observable(!callActions ? 0 : callActions.TargetTime),
                AcceptedDate: ko.observable(!callActions ? 0 : callActions.AcceptedDate),
                //AcceptedTime: ko.observable(!callActions ? 0 : callActions.AcceptedTime),
                AcceptedBy: ko.observable(!callActions ? 0 : callActions.AcceptedBy),
                ActionTypeId: ko.observable(!callActions ? 0 : callActions.ActionTypeId),
                Cost: ko.observable(!callActions ? 0 : callActions.Cost),
                NumberOfHours: ko.observable(!callActions ? 0 : callActions.NumberOfHours),
                Done: ko.observable(!callActions ? 0 : callActions.Done)
            };
        }
        return callActionViewModel;
    };

    koCallActionNamespace.bindDataCallAction = function (callActions) {
        var viewModel = koCallActionNamespace.initViewModel(callActions);

        ko.applyBindings(viewModel, document.getElementById('callActionsViewModel'));
        koTrnCallActionViewModel = viewModel;

    };

    koCallActionNamespace.getTrnCallAction = function () {
        $.ajax({
            url: "@Url.Action("TrnCallActionDetail", "Call")",
            data: { 'callActionId': $callActionId },
            type: 'get',
            async: false,
            contentType: 'application/json',
            success: function (result) {
                koCallActionNamespace.bindDataCallAction(result);
            },
            error: function(err) {
                alert(err);
            }
        });
    };

    koCallActionNamespace.saveTrnCallAction = function () {
        $.ajax({
            url: "@Url.Action("TrnCallActionDetailSave", "Call")",
            async: false,
            type: 'post',
            data: ko.toJSON(koTrnCallActionViewModel),
            contentType: 'application/json',
            success: function () {
                toastr.success('Successfully Saved...');
            }
        });
    };

    function selectActedBy(id, fn) {
        $.ajax({
            url: "@Url.Action("SelectActedByById", "Call")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: { 'Id': id },
            async: false,
            responseType: "json",
            success:
            function (result) {
                fn(result);
            }
        });
    }

    function selectActionType(id, fn) {
        $.ajax({
            url: "@Url.Action("SelectActionTypeById", "Call")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: { 'Id': id },
            async: false,
            responseType: "json",
            success:
                function (result) {
                    fn(result);
                }
        });
    }

    function selectDone(id, fn) {
        $.ajax({
            url: "@Url.Action("SelectDoneByText", "Call")",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: { 'Id': id },
            async: false,
            responseType: "json",
            success:
            function (result) {
                fn(result);
            }
        });
    }

    $(document).ready(function () {
        $('#EncodedDateMem').on('click', function () {
            $('#EncodedDateMem').datepicker('show');
        });

        $('#TargetDateMem').on('click', function() {
            $('#TargetDateMem').datepicker('show');
        });

        $('#AcceptedDateMem').on('click', function () {
            $('#AcceptedDateMem').datepicker('show');
        });

        $('#TrnCallActionListDatable').dataTable(
            {
                "bFilter": false,
                "bLengthChange": false,
                "sAjaxSource": "@Url.Action("TrnCallActionList", "Call", new {callId = HttpContext.Current.Request.QueryString["Id"] ?? "0"})",
                "aoColumns": [
                    {
                        "mData": "Id", "bSearchable": false,
                        "bSortable": false,
                        "sWidth": "40px",
                        "mRender": function (oObj) {
                            return '<button type="button" class="btn btn-sm btn-primary" onclick="cmdDetailCallAction_onClick(' + oObj + ')"><i class="glyphicon glyphicon-list"></i>&nbsp;Detail</button>';
                        }
                    },
                    {
                        "mData": "Id", "bSearchable": false,
                        "bSortable": false,
                        "sWidth": "40px",
                        "mRender": function (oObj) {
                            return '<button type="button" class="btn btn-sm btn-danger" onclick="cmdDeleteCallAction_onClick(' + oObj + ')"><i class="glyphicon glyphicon-trash"></i>&nbsp;Delete</button>';
                        }
                    },
                    { "mDataProp": "ActedBy" },
                    { "mDataProp": "CallAction" },
                    { "mDataProp": "AcceptedDate" },
                    { "mDataProp": "ActionType" },
                    { "mDataProp": "Done" }
                ]
            });
    });

    function load_callActionDetail(callActId) {
        $callActionId = callActId;
        var pageSize = 20;

        koCallActionNamespace.getTrnCallAction();

        selectActedBy($callActionId, function (result) {
            $actedById = result.Id;
            $actedBy = result.Name;
        });

        selectActionType($callActionId, function (result) {
            $actionTypeId = result.Id;
            $actionType = result.ActionType;
        });

        selectDone($callActionId, function (result) {
            $done = result.Done;
        });

        $('#ActedByIdSelect').select2({
            placeholder: 'Acted By',
            minimumInputLength: 0,
            ajax: {
                quietMillis: 10,
                url: '@Url.Action("SelectActedBy", "Call")',
                dataType: 'jsonp',
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term
                    };
                },
                results: function (data, page) {
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            }
           ,
            allowClear: true,
            formatSelection: function (data) {
                return data.text;
            },
            initSelection: function (element, callback) {
                if ($callActionId !== "") {
                    var data = { id: $actedById, text: $actedBy };
                    callback(data);
                }
            }
        }).on('change', function (e) {
            console.log(e.val);

            var actedByElem = document.getElementById("ActedByIdMem");
            actedByElem.value = e.val;
            ko.utils.triggerEvent(actedByElem, "change");
        });

        $('#ActionTypeIdSelect').select2({
            placeholder: 'Action Type',
            minimumInputLength: 0,
            ajax: {
                quietMillis: 10,
                url: '@Url.Action("SelectActionType", "Call")',
                dataType: 'jsonp',
                data: function(term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term
                    };
                },
                results: function(data, page) {
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            },
            allowClear: true,
            formatSelection: function(data) {
                return data.text;
            },
            initSelection: function(element, callback) {
                if ($callActionId !== "") {
                    var data = { id: $actionTypeId, text: $actionType };
                    callback(data);
                }
            }
        }).on('change', function(e) {
            console.log(e.val);

            var actionTypeElem = document.getElementById("ActionTypeIdMem");
            actionTypeElem.value = e.val;
            ko.utils.triggerEvent(actionTypeElem, "change");
        });

        $('#DoneSelect').select2({
            placeholder: 'Done'
        }).on('change', function(e) {
            var doneElem = document.getElementById("DoneMem");
            doneElem.value = e.val;
            ko.utils.triggerEvent(doneElem, "change");
        }).select2('val', $done);

        $('#callActionModal').modal('toggle');
        $.fn.modal.Constructor.prototype.enforceFocus = function() {
        };
    }

    function cmdAddCallAction_onClick() {
        var callId = "@HttpContext.Current.Request.QueryString["Id"]";

        if (callId == "")
        {
            alert('Not Allowed, Please add save first the call...');
        }
        else {
            load_callActionDetail(0);
        }
    }

    function cmdDetailCallAction_onClick(callActId) {
            load_callActionDetail(callActId);
    }

    function cmdDeleteCallAction_onClick(callActId) {
        if (confirm("Do you want to delete this call action: " + callActId)) {
            var data = { 'id': callActId };
            $.post('@Url.Action("TrnCallActionListDelete", "Call")', data,
                function (retdata) {
                    if (retdata == true) {
                        location.href = 'TrnCallDetailView?Id=' + "@HttpContext.Current.Request.QueryString["Id"]";
                        toastr.info("Record Deleted succesfully..");
                    }
                    else
                        toastr.error("Record Delete failed...");
                });
        }
    }

    function cmdCallActionPrint_onClick() {
        if ($callActionId == 0){
            alert("Please save before printing...");
        }
        else{
            location.href = 'RepCallActionView?Id=' + $callActionId;
        }
    }

    function cmdSaveCallAction_onClick() {
        var callIdElem = document.getElementById("CallIdMem");
        callIdElem.value = "@HttpContext.Current.Request.QueryString["Id"]";
        ko.utils.triggerEvent(callIdElem, "change");

        if ($callActionId == 0) {
            if (confirm("Do you want save this record?...")) {
                koCallActionNamespace.saveTrnCallAction();
            }
        } else {
            if (confirm("Do you want update this record?...")) {
                koCallActionNamespace.saveTrnCallAction();
            }
        };

        ko.cleanNode(document.getElementById("callActionsViewModel"));

        location.href = 'TrnCallDetailView?Id=' + "@HttpContext.Current.Request.QueryString["Id"]";
    }

    function cmdCallActionClose_onClick() {
        ko.cleanNode(document.getElementById("callActionsViewModel"));

        location.href = 'TrnCallDetailView?Id=' + "@HttpContext.Current.Request.QueryString["Id"]";
    }

</script>